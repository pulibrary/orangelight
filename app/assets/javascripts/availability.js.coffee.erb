jQuery ->
  window.availability_updater = new AvailabilityUpdater
class AvailabilityUpdater
  constructor: ->
    this.request_availability()
  availability_url: "<%= ENV['bibdata_base'] %>/availability"
  id = ''
  on_site_status = 'On-site'
  on_site_unavailable = 'On-site - '
  circ_desk = 'See front desk'
  available_statuses = ['Not charged', 'On shelf']
  returned_statuses = ['Discharged']
  in_process_statuses = ['In process', 'On-site - in process']
  checked_out_statuses = ['Charged', 'Renewed', 'Overdue', 'On hold',
    'In transit', 'In transit on hold', 'At bindery',
    'Remote storage request', 'Hold request', 'Recall request']
  missing_statuses = ['Missing', 'Claims returned', 'Withdrawn']
  long_overdue_statuses = ['Lost--system applied']
  lost_statuses = ['Lost--library applied']
  available_labels = ['Available', 'Returned', 'In process', 'Requestable',
    'On shelf', 'All items available', 'On-site access']
  available_non_requestable_labels = ['Available', 'Returned', 'Requestable',
    'On shelf', 'All items available', 'On-site access', 'On-site - in-transit discharged']
  open_location_labels = ['Available', 'All items available']
  unavailable_labels = ['Checked out', 'Missing', 'Lost']
  request_availability: ->
    if $(".documents-list").length > 0
      ids = this.record_ids().toArray()
      params = $.param({ids: ids})
      url = "#{@availability_url}?#{params}"
      $.getJSON(url, this.process_records)
    else if $("*[data-availability-record='true']").length > 0
      id = window.location.pathname.split('/')[2]
      url = "#{@availability_url}?id=#{id}"
      $.getJSON(url, this.process_single)
  process_records: (records) =>
    for record_id, holding_records of records
      this.apply_record(record_id, holding_records)
  process_single: (holding_records) =>
    for holding_id, availability_info of holding_records
      availability_element = $("*[data-availability-record='true'][data-record-id='#{id}'][data-holding-id='#{holding_id}'] .availability-icon")
      aeon = $("*[data-availability-record='true'][data-record-id='#{id}'][data-holding-id='#{holding_id}']").attr('data-aeon')
      if availability_info['label']
        location = $("*[data-location='true'][data-holding-id='#{holding_id}']")
        location.text(availability_info['label'])
      this.get_issues(holding_id) if $(".journal-current-issues").length > 0
      if availability_info['more_items']
        if title_case(availability_info['status']).match(on_site_status)
          this.apply_record_icon(availability_element, "On-site access", aeon, availability_info)
        else
          this.apply_record_icon(availability_element, "All items available", aeon, availability_info)
        this.get_more_items(holding_id, availability_info['label'])
      else
        this.apply_record_icon(availability_element, availability_info['status'], aeon, availability_info)
      this.update_location_services(holding_id, availability_info)
  update_location_services: (holding_id, availability_info) ->
    status = availability_info['status']
    temp_status = availability_info['temp_loc']
    location_services_element = $(".location-services[data-holding-id='#{holding_id}']")
    availability_label = $(".holding-status[data-holding-id='#{holding_id}'] .availability-icon.label")
    if availability_label.text()
      availability_label_text = title_case(availability_label.text())
    display_request = location_services_element.attr('data-requestable')
    if availability_label_text not in available_non_requestable_labels
      display_request = 'true'
    if title_case(status) == 'On-site - in transit discharged'
      display_request = 'false' 
    if display_request == 'true'
      if temp_status
        location_services_element.hide()
      else
        location_services_element.show()
  apply_record: (record_id, holding_records) ->
    for holding_id, availability_info of holding_records
      if availability_info['label']
        location = $("*[data-location='true'][data-record-id='#{record_id}'][data-holding-id='#{holding_id}'] .results_location")
        aeon = $("*[data-record-id='#{record_id}'][data-holding-id='#{holding_id}']").attr('data-aeon')
        location.text(availability_info['label'])
      this.record_needs_more_info(record_id) if availability_info['more_items']
      availability_element = $("*[data-availability-record='true'][data-record-id='#{record_id}'][data-holding-id='#{holding_id}'] .availability-icon")
      if availability_info['temp_loc']
        $(availability_element).next('.icon-warning').hide()
      this.apply_record_icon(availability_element, availability_info['status'], aeon, {})
    true
  get_more_items: (holding_id, holding_label) ->
    url = "#{@availability_url}?mfhd=#{holding_id}"
    req = $.getJSON url
    element = $("*[data-availability-record='true'][data-holding-id='#{holding_id}']")
    req.success (data) ->
      ul = "<ul class=\"item-status\">"
      for key, item of data
        status = title_case(item['status'])
        label = status_label(status)
        if holding_label != item['label'] || item['temp_loc']
          li = "<li>#{item['enum_display'] || 'Item'}: #{item['label']} - #{status_display(status, label)}</li>"
          ul = ul + li
        if (status not in available_statuses && status != on_site_status)
          unless holding_label != item['label'] || item['temp_loc']
            li = "<li>#{item['enum_display'] || 'Item'}: #{status_display(status, label, item['due_date'])}</li>"
            ul = ul + li
          span = $("*[data-holding-id='#{holding_id}'] .availability-icon")
          txt = if status.match(on_site_unavailable)
            circ_desk
          else if label not in unavailable_labels && span.text() != "Some items not available"
            "Some items may not be available"
          else
            "Some items not available"
          span.text(txt)
          span.attr("title", "Availability: " + txt)
          span.attr("data-original-title", "Availability: " + txt)
          if !status.match(on_site_unavailable)
            span.removeClass("label-success")
            span.addClass("label-default")
            location_services_element = $(".location-services[data-holding-id='#{holding_id}']")
            location_services_element.show()
      ul = ul + "</ul>"
      element.append(ul) if ul != "<ul class=\"item-status\"></ul>"
  get_issues: (holding_id) ->
    url = "#{@availability_url}?mfhd_serial=#{holding_id}"
    req = $.getJSON url
    element = $("*[data-journal='true'][data-holding-id='#{holding_id}']")
    req.success (data) ->
      if data.length > 1
        element.prepend("<div class=\"holding-label\">Current issues: <span class=\"pull-right trigger\">More</span></div>")
      else if data != ''
        element.prepend("<div class=\"holding-label\">Current issues:</div>")
      for key, issue of data
        li = $("<li>#{issue}</li>")
        element.append(li)
  record_needs_more_info: (record_id) ->
    element = $("*[data-record-id='#{record_id}'] .more-info")
    element.addClass("label label-default")
    element.text("View record for full availability")
    element.attr('title', "Click on the record for full availability info")
    empty = $("*[data-record-id='#{record_id}'].empty")
    empty.removeClass("empty")
  apply_record_icon: (availability_element, status, aeon, availability_info) ->
    status = title_case(status)
    availability_element.addClass("label")
    label = status_label(status)
    availability_element.text("#{label}#{due_date(availability_info["due_date"])}")
    if label in unavailable_labels
      availability_element.addClass("label-danger")
    else if label in available_labels
      availability_element.addClass("label-success")
    else if label == 'On-site access'
      availability_element.addClass("label-warning")
    else if label == circ_desk
      availability_element.addClass("label-warning")
    else if label == 'Online'
      availability_element.addClass("label-primary")
    else
      availability_element.addClass("label-default")
    if aeon == 'true'
      status = "On-site access by request"
    availability_element.attr('title', "Availability: #{title_case(status)}")
    availability_element.attr('data-original-title', "Availability: #{title_case(status)}")
    availability_element.attr('data-toggle', 'tooltip')
  record_ids: ->
    $("*[data-availability-record='true'][data-record-id]").map((_, x) -> $(x).attr("data-record-id"))
  status_label = (status) ->
    switch
      when status in long_overdue_statuses then 'Long overdue'
      when status in lost_statuses then 'Lost'
      when status in available_statuses then 'Available'
      when status in returned_statuses then 'Returned'
      when status == 'In transit discharged' then 'In transit'
      when status in in_process_statuses then 'In process'
      when status in checked_out_statuses then 'Checked out'
      when status in missing_statuses then 'Missing'
      when status.match(on_site_unavailable) then circ_desk
      when status.match(on_site_status) then 'On-site access'
      when status.match('Order received') then 'Order received'
      when status.match('Pending order') then 'Pending order'
      when status.match('On-order') then 'On-order'
      else status
  status_display = (status, label, date_due) ->
    if status.match(label) || status.match(on_site_status)
      status
    else
      "#{label} #{due_date(date_due)} (#{status})"
  due_date = (date_string) ->
    return "" unless date_string?
    " - #{date_string}"
  title_case = (str) ->
    str[0].toUpperCase() + str[1..str.length - 1].toLowerCase()
  stackmap_link = (record_id, availability_info, marker_only = false) ->
    base = "<%= ENV['stackmap_base'] %>"
    temp_status = availability_info['temp_loc']
    if temp_status
      location = availability_info['temp_loc']
    else
      location = availability_info['location']
    map_url = "#{base}?loc=#{location}&id=#{record_id}"
    link = "<a target='_blank' title='Where to find it' class='find-it' data-location-map='#{location}' data-toggle='tooltip' href='#{map_url}'>"
    marker_span = "<span class='glyphicon glyphicon-map-marker'></span>"
    if marker_only
      link = "#{link}#{marker_span}</a>"
    else
      link = "#{link}<span class='link-text'>Where to find it</span>#{marker_span}</a>"
    link


